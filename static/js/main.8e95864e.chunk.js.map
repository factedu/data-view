{"version":3,"sources":["components/BarChart/index.jsx","components/BarChart/WithMarginBarChart.jsx","components/D3One/index.jsx","components/BarChart/WithAxisBarChart.jsx","components/LineChart/index.jsx","ui.components/AppBarComponent.jsx","assets/images/dataviewlogo_white.png","layouts/main.layout.jsx","screens/README.md","assets/images/dataviewlogo.png","screens/AboutScreen.jsx","App.js","reportWebVitals.js","index.js"],"names":["BarChart","margin","innerHeight","innerWidth","console","log","WithMarginBarChart","width","document","body","clientWidth","arc","innerRadius","outerRadius","D3One","WithAxisBarChart","LineChart","height","top","right","bottom","left","chroma","scale","useState","confirmedCases","setConfirmedCases","recoveredCases","setRecoveredCases","data","setData","xAxisEl","useRef","yAxisEl","xGridEl","yGridEl","xScale","scaleTime","range","yScale","scaleLinear","xAxis","axisBottom","ticks","tickSize","tickFormat","timeFormat","yAxis","axisLeft","useEffect","csv","then","res","cleanData","map","d","Confirmed","parseInt","Date","parse","Deaths","Recovered","initChart","select","current","call","makeXGridLines","style","makeYGridLines","lineGenerator","line","timeDomain","extent","confirmedMax","max","domain","min","x","y","tmpConfirmedCases","Container","Paper","padding","display","flexDirection","justifyContent","alignItems","fill","stroke","strokeWidth","ref","transform","Typography","variant","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","drawerWidth","useStyles","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","enteringScreen","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","breakpoints","up","toolbar","mixins","content","MainLayout","children","classes","useTheme","React","open","setOpen","className","CssBaseline","AppBar","position","clsx","Toolbar","IconButton","color","aria-label","onClick","edge","Box","to","src","Logo","noWrap","Drawer","paper","backgroundColor","palette","primary","main","direction","Divider","List","ListItem","button","component","Link","ListItemIcon","ListItemText","AboutScreen","markdownText","setMarkdownText","fetch","aboutMd","a","text","catch","error","widht","App","createTheme","purple","secondary","green","ThemeProvider","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8e95864e.chunk.js","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\nimport { csv, arc, pie,max, scaleBand, scaleLinear } from 'd3'\n\nconst csvUrl = \"https://gist.githubusercontent.com/curran/0ac4077c7fc6390f5dd33bf5c06cb5ff/raw/605c54080c7a93a417a3cea93fd52e7550e76500/UN_Population_2019.csv\";\n\nconst width = 960;\nconst height = 500;\n\nfunction BarChart() {\n    const [data, setData] = useState();\n    useEffect(() => {\n        const row = d => {\n            d.Population = +d['2020'];\n            return d;\n        }\n        csv(csvUrl, row).then(data=>{\n            setData(data.slice(0,10))\n        });\n    }, [])\n\n\n    if (!data) {\n        return (\n            <div>\n                Loading Data..\n            </div>\n        )\n    }\n    console.log(data[0]);\n    const yScale = scaleBand()\n        .domain(data.map(d => d.Country))\n        .range([0, height]);\n    const xScale = scaleLinear()\n        .domain([0, max(data, d => d.Population)])\n        .range([0, width]);\n    return (\n        <svg width={width} height={height}>\n            {data.map(d => (\n                <rect x={0} y={yScale(d.Country)} width={xScale(d.Population)} height={yScale.bandwidth()} />\n            ))}\n        </svg>\n    )\n}\n\nexport default BarChart\n","import React, { useState, useCallback, useEffect } from 'react'\nimport { csv, arc, pie,max, scaleBand, scaleLinear } from 'd3'\n\nconst csvUrl = \"https://gist.githubusercontent.com/curran/0ac4077c7fc6390f5dd33bf5c06cb5ff/raw/605c54080c7a93a417a3cea93fd52e7550e76500/UN_Population_2019.csv\";\n\nconst width = 960;\nconst height = 500;\nconst margin = {top:20,right:20,bottom:20,left:20};\nconst innerHeight = height - margin.top - margin.bottom;\n\nconst innerWidth = width - margin.left - margin.right;\nconsole.log(innerHeight,innerWidth);\nfunction WithMarginBarChart() {\n    const [data, setData] = useState();\n    useEffect(() => {\n        const row = d => {\n            d.Population = +d['2020'];\n            return d;\n        }\n        csv(csvUrl, row).then(data=>{\n            setData(data.slice(0,10))\n        });\n    }, [])\n\n\n    if (!data) {\n        return (\n            <div>\n                Loading Data..\n            </div>\n        )\n    }\n    const yScale = scaleBand()\n        .domain(data.map(d => d.Country))\n        .range([0, innerHeight]);\n    const xScale = scaleLinear()\n        .domain([0, max(data, d => d.Population)])\n        .range([0, innerWidth]);\n    return (\n        <svg width={width} height={height}>\n            <g transform={`translate(${margin.left},${margin.top})`}>\n            {data.map(d => (\n                <rect x={0} y={yScale(d.Country)} width={xScale(d.Population)} height={yScale.bandwidth()} />\n            ))}\n            </g>\n        </svg>\n    )\n}\n\nexport default WithMarginBarChart\n","import React, { useState, useCallback, useEffect } from 'react'\nimport { csv, arc, pie } from 'd3'\n\nconst csvUrl = 'https://gist.githubusercontent.com/curran/b236990081a24761f7000567094914e0/raw/cssNamedColors.csv';\n\nconst width = document.body.clientWidth;\nconst height = 500;\nconst centerX = width / 2;\nconst centerY = height / 2;\nconst pieArc = arc()\n    .innerRadius(0)\n    .outerRadius(width)\n\nfunction D3One() {\n    const [data, setData] = useState(null);\n    useEffect(() => {\n        csv(csvUrl).then(res => {\n            console.log(res[0])\n            return setData(res);\n        })\n    }, []);\n    if (!data) {\n        return <pre>Loading....</pre>\n    }\n\n    const colorPie = pie().value(1);\n\n    return (\n        <svg width={width} height={height}>\n            <g transform={`translate(${centerX},${centerY})`}>\n                {\n                    // data.map((d,i)=>{\n                    //     return (\n                    //         <path fill={d['RGB hex value']} d={pieArc({\n                    //             startAngle:i/data.length*2*Math.PI,\n                    //             endAngle: (i+1) / data.length * 2 * Math.PI\n                    //         })} />\n                    //     )\n                    // })\n                    colorPie(data).map((d,i) => {\n                        return (\n                            <path key={i+d.data['RGB hex value']} fill={d.data['RGB hex value']} d={pieArc(d)} />\n                        )\n                    })\n                }\n            </g>\n        </svg>\n    )\n}\n\nexport default D3One\n","import React, { useState, useEffect } from 'react'\nimport { csv, max, scaleBand, scaleLinear } from 'd3'\n\nconst csvUrl = \"https://gist.githubusercontent.com/curran/0ac4077c7fc6390f5dd33bf5c06cb5ff/raw/605c54080c7a93a417a3cea93fd52e7550e76500/UN_Population_2019.csv\";\n\nconst width = 960;\nconst height = 500;\nconst margin = { top: 20, right: 20, bottom: 20, left: 200 };\nconst innerHeight = height - margin.top - margin.bottom;\n\nconst innerWidth = width - margin.left - margin.right;\n\nfunction WithAxisBarChart() {\n    const [data, setData] = useState();\n    useEffect(() => {\n        const row = d => {\n            d.Population = +d['2020'];\n            return d;\n        }\n        csv(csvUrl, row).then(data => {\n            setData(data.slice(0, 20))\n        });\n    }, [])\n\n\n    if (!data) {\n        return (\n            <div>\n                Loading Data..\n            </div>\n        )\n    }\n    const yScale = scaleBand()\n        .domain(data.map(d => d.Country))\n        .range([0, innerHeight]);\n\n    const xScale = scaleLinear()\n        .domain([0, max(data, d => d.Population)])\n        .range([0, innerWidth]);\n\n\n\n\n    return (\n        <svg width={width} height={height}>\n            <g transform={`translate(${margin.left},${margin.top})`}>\n                {xScale.ticks().map(tickValue => (\n                    <g key={tickValue} transform={`translate(${xScale(tickValue)},0)`}>\n                        <line\n                            x1={0}\n                            y1={0}\n                            x2={0}\n                            y2={innerHeight}\n                            stroke=\"red\"\n                        />\n                        <text dy=\".71em\" style={{ textAnchor: 'middle' }} fill=\"red\" y={innerHeight + 3}>{tickValue}</text>\n                    </g>\n                ))}\n                {yScale.domain().map(tickValue => (\n                    <g key={tickValue} transform={`translate(0,${yScale(tickValue) + yScale.bandwidth() / 2})`}>\n                        <text dy=\".32em\" x={-9} style={{ textAnchor: 'end' }} fill=\"red\">{tickValue}</text>\n                    </g>\n                ))}\n                {data.map(d => (\n                    <g>\n                        <rect key={d.Country} stroke=\"white\" fill={'rgba(0,0,0,0.5)'} x={0} y={yScale(d.Country)} width={xScale(d.Population)} height={yScale.bandwidth()} />\n                        <text x={10} y={yScale(d.Country)+16} >{d.Population}</text>\n                    </g>\n                ))}\n            </g>\n        </svg>\n    )\n}\n\nexport default WithAxisBarChart\n","import React, { useState, useEffect, useRef } from 'react'\nimport { csv, scaleTime, scaleLinear, axisBottom, axisLeft, timeFormat, extent, max, min, line, select } from \"d3\"\nimport chroma from 'chroma-js';\nimport { Container, Paper, Typography } from '@material-ui/core';\n\nfunction LineChart({ width = 900, height = 600, margin = { top: 20, right: 5, bottom: 20, left: 100 } }) {\n    const csvUrl = 'https://gist.githubusercontent.com/factedu/3b41e485796936281c246e11512eeb2f/raw/ec8f3462c49f8bdb22095a81ba5c2c2a25e1b608/india_covid_cases_over_time.csv';\n    const red = '#eb6a5b';\n    const green = \"#b6e86f\";\n    const blue = '#52b6ca';\n    const colors = chroma.scale([blue, green, red]);\n    const [confirmedCases, setConfirmedCases] = useState();\n    const [recoveredCases, setRecoveredCases] = useState();\n    const [data, setData] = useState();\n    const xAxisEl = useRef(null);\n    const yAxisEl = useRef(null);\n    const xGridEl = useRef(null);\n    const yGridEl = useRef(null);\n\n    const xScale = scaleTime().range([margin.left, width - margin.right]);\n    const yScale = scaleLinear().range([0, height - margin.top - margin.bottom]);\n\n    const xAxis = axisBottom().scale(xScale).ticks(10).tickSize(10).tickFormat(timeFormat('%Y-%m-%d'));\n    const yAxis = axisLeft().scale(yScale).ticks(10)\n\n    useEffect(() => {\n        csv(csvUrl).then(res => {\n\n            const cleanData = res.map(d => {\n                return {\n                    Confirmed: parseInt(d.Confirmed),\n                    Date: +Date.parse(d.Date),\n                    Deaths: parseInt(d.Deaths),\n                    Recovered: parseInt(d.Recovered)\n                }\n            })\n            setData(cleanData);\n        })\n    }, [])\n\n    useEffect(() => {\n        if (!data) return;\n        console.log(data[0]);\n        initChart();\n        select(xAxisEl.current).call(xAxis);\n        select(yAxisEl.current).call(yAxis);\n        select(xGridEl.current).call(makeXGridLines().tickSize(-width).tickFormat(\"\")).style('color', 'grey');\n        select(yGridEl.current).call(makeYGridLines().tickSize(-width).tickFormat(\"\")).style('color', 'grey');\n    }, [data])\n\n    const lineGenerator = line();\n\n    const initChart = () => {\n        if (!data) return;\n        // upadate scales\n        const timeDomain = extent(data, (d) => {\n            return d.Date;\n        })\n        const confirmedMax = max(data, d => d.Confirmed);\n        xScale.domain(timeDomain);\n        yScale.domain([confirmedMax, min(data, d => d.Confirmed)]);\n\n        lineGenerator.x(d => xScale(d.Date));\n        lineGenerator.y(d => yScale(d.Confirmed));\n\n        const tmpConfirmedCases = lineGenerator(data);\n        setConfirmedCases(tmpConfirmedCases);\n\n        lineGenerator.y(d => yScale(d.Recovered));\n        setRecoveredCases(lineGenerator(data));\n    }\n\n    const makeXGridLines = () => {\n        return axisBottom(xScale).ticks(10);\n    }\n\n    const makeYGridLines = () => {\n        return axisLeft(yScale).ticks(10);\n    }\n\n    if (!data) {\n        return (\n            <div>Loading data...</div>\n        )\n    }\n\n    return (\n        <Container>\n            <Paper style={{ padding: 16, display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\n                <svg width={width} height={height}>\n                    <path d={confirmedCases} fill='none' stroke='red' strokeWidth={4} />\n                    <path d={recoveredCases} fill='none' stroke='green' strokeWidth={4} />\n\n                    <g ref={xGridEl} transform={`translate(0,${height - margin.bottom - margin.top})`} />\n                    <g ref={yGridEl} transform={`translate(${margin.left},0)`} />\n\n                    <g>\n                        <g ref={xAxisEl} transform={`translate(0,${height - margin.bottom - margin.top})`} />\n                        <g ref={yAxisEl} transform={`translate(${margin.left},${0})`} />\n                    </g>\n                </svg>\n                <Typography variant=\"h6\">Covid-19 Status [India]</Typography>\n            </Paper>\n        </Container>\n    )\n}\n\nexport default LineChart\n","import { AppBar, IconButton, Toolbar, Typography,Button } from '@material-ui/core'\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { makeStyles } from '@material-ui/styles';\nimport React from 'react'\n\nfunction AppBarComponent() {\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        DataView\n                    </Typography>\n                    <Button color=\"inherit\">About</Button>\n                </Toolbar>\n            </AppBar>\n        </div>\n    )\n}\n\nconst useStyles = makeStyles((theme)=>({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n}))\n\nexport default AppBarComponent\n","export default __webpack_public_path__ + \"static/media/dataviewlogo_white.70304617.png\";","import React from 'react';\nimport {\n    Link\n} from \"react-router-dom\";\nimport clsx from 'clsx';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport ShowChartIcon from '@material-ui/icons/ShowChart';\n\nimport Logo from '../assets/images/dataviewlogo_white.png';\nimport { Box } from '@material-ui/core';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        marginLeft: drawerWidth,\n        width: `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    menuButton: {\n        marginRight: 36,\n    },\n    hide: {\n        display: 'none',\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n        whiteSpace: 'nowrap',\n    },\n    drawerOpen: {\n        width: drawerWidth,\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    drawerClose: {\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        overflowX: 'hidden',\n        width: theme.spacing(7) + 1,\n        [theme.breakpoints.up('sm')]: {\n            width: theme.spacing(9) + 1,\n        },\n\n\n    },\n    toolbar: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        padding: theme.spacing(0, 1),\n        // necessary for content to be below app bar\n        ...theme.mixins.toolbar,\n\n    },\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n    },\n}));\n\nexport default function MainLayout({ children }) {\n    const classes = useStyles();\n    const theme = useTheme();\n    const [open, setOpen] = React.useState(false);\n\n    const handleDrawerOpen = () => {\n        setOpen(true);\n    };\n\n    const handleDrawerClose = () => {\n        setOpen(false);\n    };\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline />\n            <AppBar\n                position=\"fixed\"\n                className={clsx(classes.appBar, {\n                    [classes.appBarShift]: open,\n                })}\n            >\n                <Toolbar>\n                    <IconButton\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                        onClick={handleDrawerOpen}\n                        edge=\"start\"\n                        className={clsx(classes.menuButton, {\n                            [classes.hide]: open,\n                        })}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    {(!open) && <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                        <Link to=\"/\">\n                            <img src={Logo} height=\"40\" width=\"40\" style={{ marginRight: 12 }} />\n                        </Link>\n                        \n                        <Typography variant=\"h6\" noWrap>\n                            DataView\n                        </Typography>\n                    </Box>}\n\n                </Toolbar>\n            </AppBar>\n            <Drawer\n                variant=\"permanent\"\n                className={clsx(classes.drawer, {\n                    [classes.drawerOpen]: open,\n                    [classes.drawerClose]: !open,\n                })}\n                classes={{\n                    paper: clsx({\n                        [classes.drawerOpen]: open,\n                        [classes.drawerClose]: !open,\n                    }),\n                }}\n            >\n                <div className={classes.toolbar} style={{ backgroundColor: theme.palette.primary.main }}>\n                    <Box display=\"flex\" color=\"white\" flexDirection=\"row\" justifyContent=\"center\" alignItems=\"center\">\n                        <Link to=\"/\">\n                            <img src={Logo} height=\"40\" width=\"40\" style={{ marginRight: 12 }} />\n                        </Link>\n                        <Typography variant=\"h6\" noWrap>\n                            DataView\n                        </Typography>\n                    </Box>\n                    <IconButton style={{ color: 'white' }} onClick={handleDrawerClose}>\n\n                        {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\n                    </IconButton>\n                </div>\n                <Divider />\n                <List>\n                    <ListItem button to=\"/covid-19\" component={Link}>\n                        <ListItemIcon><ShowChartIcon /></ListItemIcon>\n                        <ListItemText primary={'Covid-19 India'} />\n                    </ListItem>\n                </List>\n                <Divider />\n            </Drawer>\n            <main className={classes.content}>\n                <div className={classes.toolbar} />\n                {children}\n            </main>\n        </div>\n    );\n}","export default __webpack_public_path__ + \"static/media/README.5053c0bf.md\";","export default __webpack_public_path__ + \"static/media/dataviewlogo.55ca0f2d.png\";","import { Box, Container, Paper, Typography } from '@material-ui/core';\nimport React,{useEffect,useState} from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport aboutMd from './README.md';\nimport Logo from '../assets/images/dataviewlogo.png';\nfunction AboutScreen() {\n    const [markdownText,setMarkdownText]=useState();\n    useEffect(() => {\n        fetch(aboutMd).then(async res=>{\n            const text = await res.text();\n            setMarkdownText(text);\n        }).catch(error=>{\n            console.log(error);\n        })\n    }, [])\n    return (\n        <Container>\n            \n            <Paper style={{ padding: 25 }}>\n                <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\">\n                    <img src={Logo} widht=\"200\" height=\"200\" />\n                    <Typography variant=\"h2\" noWrap>\n                        DataView\n                    </Typography>\n                </Box>\n                <ReactMarkdown>{markdownText}</ReactMarkdown>\n            </Paper>\n        </Container>\n    )\n}\n\nexport default AboutScreen\n","import { createTheme, ThemeProvider } from '@material-ui/core/styles';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport purple from '@material-ui/core/colors/purple';\nimport green from '@material-ui/core/colors/green';\nimport BarChart from './components/BarChart';\nimport WithMarginBarChart from './components/BarChart/WithMarginBarChart';\nimport D3One from './components/D3One';\nimport FlusServeillance from './components/FluServeillance';\nimport WithAxisBarChart from './components/BarChart/WithAxisBarChart';\nimport LineChart from './components/LineChart';\nimport AppBarComponent from './ui.components/AppBarComponent';\nimport MainLayout from './layouts/main.layout';\nimport AboutScreen from './screens/AboutScreen';\n\nfunction App() {\n  const theme = createTheme({\n    palette: {\n      primary: {\n        main: purple[500],\n      },\n      secondary: {\n        main: green[500],\n      },\n    },\n  });\n  return (\n    <ThemeProvider theme={theme}>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <MainLayout>\n              <AboutScreen />\n            </MainLayout>\n          </Route>\n          <Route exact path=\"/covid-19\">\n            <MainLayout>\n              <LineChart />\n            </MainLayout>\n          </Route>\n        </Switch>\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}