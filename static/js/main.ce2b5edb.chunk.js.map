{"version":3,"sources":["components/BarChart/index.jsx","components/BarChart/WithMarginBarChart.jsx","components/D3One/index.jsx","components/LineChart/index.jsx","ui.components/AppBarComponent.jsx","assets/images/dataviewlogo_white.png","layouts/main.layout.jsx","screens/README.md","assets/images/dataviewlogo.png","screens/AboutScreen.jsx","App.js","reportWebVitals.js","index.js"],"names":["BarChart","margin","innerHeight","innerWidth","console","log","WithMarginBarChart","width","document","body","clientWidth","arc","innerRadius","outerRadius","D3One","LineChart","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","drawerWidth","useStyles","display","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","enteringScreen","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","breakpoints","up","toolbar","alignItems","justifyContent","padding","mixins","content","MainLayout","children","classes","useTheme","React","useState","open","setOpen","className","CssBaseline","AppBar","position","clsx","Toolbar","IconButton","color","aria-label","onClick","edge","Box","src","Logo","height","style","Typography","variant","noWrap","Drawer","paper","direction","Divider","List","map","text","index","ListItem","button","ListItemIcon","ListItemText","primary","AboutScreen","markdownText","setMarkdownText","useEffect","fetch","aboutMd","then","res","a","catch","error","Container","Paper","flexDirection","widht","App","createTheme","palette","main","purple","secondary","green","ThemeProvider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ce2b5edb.chunk.js","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\nimport { csv, arc, pie,max, scaleBand, scaleLinear } from 'd3'\n\nconst csvUrl = \"https://gist.githubusercontent.com/curran/0ac4077c7fc6390f5dd33bf5c06cb5ff/raw/605c54080c7a93a417a3cea93fd52e7550e76500/UN_Population_2019.csv\";\n\nconst width = 960;\nconst height = 500;\n\nfunction BarChart() {\n    const [data, setData] = useState();\n    useEffect(() => {\n        const row = d => {\n            d.Population = +d['2020'];\n            return d;\n        }\n        csv(csvUrl, row).then(data=>{\n            setData(data.slice(0,10))\n        });\n    }, [])\n\n\n    if (!data) {\n        return (\n            <div>\n                Loading Data..\n            </div>\n        )\n    }\n    console.log(data[0]);\n    const yScale = scaleBand()\n        .domain(data.map(d => d.Country))\n        .range([0, height]);\n    const xScale = scaleLinear()\n        .domain([0, max(data, d => d.Population)])\n        .range([0, width]);\n    return (\n        <svg width={width} height={height}>\n            {data.map(d => (\n                <rect x={0} y={yScale(d.Country)} width={xScale(d.Population)} height={yScale.bandwidth()} />\n            ))}\n        </svg>\n    )\n}\n\nexport default BarChart\n","import React, { useState, useCallback, useEffect } from 'react'\nimport { csv, arc, pie,max, scaleBand, scaleLinear } from 'd3'\n\nconst csvUrl = \"https://gist.githubusercontent.com/curran/0ac4077c7fc6390f5dd33bf5c06cb5ff/raw/605c54080c7a93a417a3cea93fd52e7550e76500/UN_Population_2019.csv\";\n\nconst width = 960;\nconst height = 500;\nconst margin = {top:20,right:20,bottom:20,left:20};\nconst innerHeight = height - margin.top - margin.bottom;\n\nconst innerWidth = width - margin.left - margin.right;\nconsole.log(innerHeight,innerWidth);\nfunction WithMarginBarChart() {\n    const [data, setData] = useState();\n    useEffect(() => {\n        const row = d => {\n            d.Population = +d['2020'];\n            return d;\n        }\n        csv(csvUrl, row).then(data=>{\n            setData(data.slice(0,10))\n        });\n    }, [])\n\n\n    if (!data) {\n        return (\n            <div>\n                Loading Data..\n            </div>\n        )\n    }\n    const yScale = scaleBand()\n        .domain(data.map(d => d.Country))\n        .range([0, innerHeight]);\n    const xScale = scaleLinear()\n        .domain([0, max(data, d => d.Population)])\n        .range([0, innerWidth]);\n    return (\n        <svg width={width} height={height}>\n            <g transform={`translate(${margin.left},${margin.top})`}>\n            {data.map(d => (\n                <rect x={0} y={yScale(d.Country)} width={xScale(d.Population)} height={yScale.bandwidth()} />\n            ))}\n            </g>\n        </svg>\n    )\n}\n\nexport default WithMarginBarChart\n","import React, { useState, useCallback, useEffect } from 'react'\nimport { csv, arc, pie } from 'd3'\n\nconst csvUrl = 'https://gist.githubusercontent.com/curran/b236990081a24761f7000567094914e0/raw/cssNamedColors.csv';\n\nconst width = document.body.clientWidth;\nconst height = 500;\nconst centerX = width / 2;\nconst centerY = height / 2;\nconst pieArc = arc()\n    .innerRadius(0)\n    .outerRadius(width)\n\nfunction D3One() {\n    const [data, setData] = useState(null);\n    useEffect(() => {\n        csv(csvUrl).then(res => {\n            console.log(res[0])\n            return setData(res);\n        })\n    }, []);\n    if (!data) {\n        return <pre>Loading....</pre>\n    }\n\n    const colorPie = pie().value(1);\n\n    return (\n        <svg width={width} height={height}>\n            <g transform={`translate(${centerX},${centerY})`}>\n                {\n                    // data.map((d,i)=>{\n                    //     return (\n                    //         <path fill={d['RGB hex value']} d={pieArc({\n                    //             startAngle:i/data.length*2*Math.PI,\n                    //             endAngle: (i+1) / data.length * 2 * Math.PI\n                    //         })} />\n                    //     )\n                    // })\n                    colorPie(data).map((d,i) => {\n                        return (\n                            <path key={i+d.data['RGB hex value']} fill={d.data['RGB hex value']} d={pieArc(d)} />\n                        )\n                    })\n                }\n            </g>\n        </svg>\n    )\n}\n\nexport default D3One\n","import React, { useState, useEffect, useRef } from 'react'\nimport { csv, scaleTime, scaleLinear, axisBottom, axisLeft, timeFormat, extent, max, min, line, select } from \"d3\"\nimport chroma from 'chroma-js';\n\nfunction LineChart({ width = 900, height = 600, margin = { top: 20, right: 5, bottom: 20, left: 100 } }) {\n    const csvUrl = 'https://gist.githubusercontent.com/factedu/3b41e485796936281c246e11512eeb2f/raw/ec8f3462c49f8bdb22095a81ba5c2c2a25e1b608/india_covid_cases_over_time.csv';\n    const red = '#eb6a5b';\n    const green = \"#b6e86f\";\n    const blue = '#52b6ca';\n    const colors = chroma.scale([blue, green, red]);\n    const [confirmedCases, setConfirmedCases] = useState();\n    const [recoveredCases, setRecoveredCases] = useState();\n    const [data, setData] = useState();\n    const xAxisEl = useRef(null);\n    const yAxisEl = useRef(null);\n    const xGridEl = useRef(null);\n    const yGridEl = useRef(null);\n\n    const xScale = scaleTime().range([margin.left, width - margin.right]);\n    const yScale = scaleLinear().range([0, height - margin.top - margin.bottom]);\n\n    const xAxis = axisBottom().scale(xScale).ticks(10).tickSize(10).tickFormat(timeFormat('%Y-%m-%d'));\n    const yAxis = axisLeft().scale(yScale).ticks(10)\n\n    useEffect(() => {\n        csv(csvUrl).then(res => {\n\n            const cleanData = res.map(d => {\n                return {\n                    Confirmed: parseInt(d.Confirmed),\n                    Date: +Date.parse(d.Date),\n                    Deaths: parseInt(d.Deaths),\n                    Recovered: parseInt(d.Recovered)\n                }\n            })\n            setData(cleanData);\n        })\n    }, [])\n\n    useEffect(() => {\n        if (!data) return;\n        console.log(data[0]);\n        initChart();\n        select(xAxisEl.current).call(xAxis);\n        select(yAxisEl.current).call(yAxis);\n        select(xGridEl.current).call(makeXGridLines().tickSize(-width).tickFormat(\"\")).style('color', 'grey');\n        select(yGridEl.current).call(makeYGridLines().tickSize(-width).tickFormat(\"\")).style('color', 'grey');\n    }, [data])\n\n    const lineGenerator = line();\n\n    const initChart = () => {\n        if (!data) return;\n        // upadate scales\n        const timeDomain = extent(data, (d) => {\n            return d.Date;\n        })\n        const confirmedMax = max(data, d => d.Confirmed);\n        xScale.domain(timeDomain);\n        yScale.domain([confirmedMax, min(data, d => d.Confirmed)]);\n\n        lineGenerator.x(d => xScale(d.Date));\n        lineGenerator.y(d => yScale(d.Confirmed));\n\n        const tmpConfirmedCases = lineGenerator(data);\n        setConfirmedCases(tmpConfirmedCases);\n\n        lineGenerator.y(d => yScale(d.Recovered));\n        setRecoveredCases(lineGenerator(data));\n    }\n\n    const makeXGridLines = () => {\n        return axisBottom(xScale).ticks(10);\n    }\n\n    const makeYGridLines = () => {\n        return axisLeft(yScale).ticks(10);\n    }\n\n    if (!data) {\n        return (\n            <div>Loading data...</div>\n        )\n    }\n\n    return (\n        <svg width={width} height={height}>\n            <path d={confirmedCases} fill='none' stroke='red' strokeWidth={4} />\n            <path d={recoveredCases} fill='none' stroke='green' strokeWidth={4} />\n\n            <g ref={xGridEl} transform={`translate(0,${height - margin.bottom - margin.top})`} />\n            <g ref={yGridEl} transform={`translate(${margin.left},0)`} />\n\n            <g>\n                <g ref={xAxisEl} transform={`translate(0,${height - margin.bottom - margin.top})`} />\n                <g ref={yAxisEl} transform={`translate(${margin.left},${0})`} />\n            </g>\n        </svg>\n    )\n}\n\nexport default LineChart\n","import { AppBar, IconButton, Toolbar, Typography,Button } from '@material-ui/core'\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { makeStyles } from '@material-ui/styles';\nimport React from 'react'\n\nfunction AppBarComponent() {\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        DataView\n                    </Typography>\n                    <Button color=\"inherit\">About</Button>\n                </Toolbar>\n            </AppBar>\n        </div>\n    )\n}\n\nconst useStyles = makeStyles((theme)=>({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n}))\n\nexport default AppBarComponent\n","export default __webpack_public_path__ + \"static/media/dataviewlogo_white.70304617.png\";","import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\n\nimport Logo from '../assets/images/dataviewlogo_white.png';\nimport { Box } from '@material-ui/core';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        marginLeft: drawerWidth,\n        width: `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    menuButton: {\n        marginRight: 36,\n    },\n    hide: {\n        display: 'none',\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n        whiteSpace: 'nowrap',\n    },\n    drawerOpen: {\n        width: drawerWidth,\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    drawerClose: {\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        overflowX: 'hidden',\n        width: theme.spacing(7) + 1,\n        [theme.breakpoints.up('sm')]: {\n            width: theme.spacing(9) + 1,\n        },\n    },\n    toolbar: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        padding: theme.spacing(0, 1),\n        // necessary for content to be below app bar\n        ...theme.mixins.toolbar,\n    },\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n    },\n}));\n\nexport default function MainLayout({children}) {\n    const classes = useStyles();\n    const theme = useTheme();\n    const [open, setOpen] = React.useState(false);\n\n    const handleDrawerOpen = () => {\n        setOpen(true);\n    };\n\n    const handleDrawerClose = () => {\n        setOpen(false);\n    };\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline />\n            <AppBar\n                position=\"fixed\"\n                className={clsx(classes.appBar, {\n                    [classes.appBarShift]: open,\n                })}\n            >\n                <Toolbar>\n                    <IconButton\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                        onClick={handleDrawerOpen}\n                        edge=\"start\"\n                        className={clsx(classes.menuButton, {\n                            [classes.hide]: open,\n                        })}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                        <img src={Logo} height=\"50\" width=\"50\" style={{marginRight:12}} />\n                        <Typography variant=\"h6\" noWrap>\n                            DataView\n                        </Typography>\n                    </Box>\n                    \n                </Toolbar>\n            </AppBar>\n            <Drawer\n                variant=\"permanent\"\n                className={clsx(classes.drawer, {\n                    [classes.drawerOpen]: open,\n                    [classes.drawerClose]: !open,\n                })}\n                classes={{\n                    paper: clsx({\n                        [classes.drawerOpen]: open,\n                        [classes.drawerClose]: !open,\n                    }),\n                }}\n            >\n                <div className={classes.toolbar}>\n                    <IconButton onClick={handleDrawerClose}>\n                        {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\n                    </IconButton>\n                </div>\n                <Divider />\n                <List>\n                    {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\n                        <ListItem button key={text}>\n                            <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n                            <ListItemText primary={text} />\n                        </ListItem>\n                    ))}\n                </List>\n                <Divider />\n                <List>\n                    {['All mail', 'Trash', 'Spam'].map((text, index) => (\n                        <ListItem button key={text}>\n                            <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n                            <ListItemText primary={text} />\n                        </ListItem>\n                    ))}\n                </List>\n            </Drawer>\n            <main className={classes.content}>\n                <div className={classes.toolbar} />\n                {children}\n            </main>\n        </div>\n    );\n}","export default __webpack_public_path__ + \"static/media/README.bde6b8c0.md\";","export default __webpack_public_path__ + \"static/media/dataviewlogo.55ca0f2d.png\";","import { Box, Container, Paper, Typography } from '@material-ui/core';\nimport React,{useEffect,useState} from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport aboutMd from './README.md';\nimport Logo from '../assets/images/dataviewlogo.png';\nfunction AboutScreen() {\n    const [markdownText,setMarkdownText]=useState();\n    useEffect(() => {\n        fetch(aboutMd).then(async res=>{\n            const text = await res.text();\n            setMarkdownText(text);\n        }).catch(error=>{\n            console.log(error);\n        })\n    }, [])\n    return (\n        <Container>\n            \n            <Paper style={{ padding: 25 }}>\n                <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\">\n                    <img src={Logo} widht=\"200\" height=\"200\" />\n                    <Typography variant=\"h2\" noWrap>\n                        DataView\n                    </Typography>\n                </Box>\n                <ReactMarkdown>{markdownText}</ReactMarkdown>\n            </Paper>\n        </Container>\n    )\n}\n\nexport default AboutScreen\n","import { createTheme, ThemeProvider } from '@material-ui/core/styles';\nimport purple from '@material-ui/core/colors/purple';\nimport green from '@material-ui/core/colors/green';\nimport BarChart from './components/BarChart';\nimport WithMarginBarChart from './components/BarChart/WithMarginBarChart';\nimport D3One from './components/D3One';\nimport FlusServeillance from './components/FluServeillance';\nimport WithAxisBarChart from './components/BarChart/WithAxisBarChart';\nimport LineChart from './components/LineChart';\nimport AppBarComponent from './ui.components/AppBarComponent';\nimport MainLayout from './layouts/main.layout';\nimport AboutScreen from './screens/AboutScreen';\n\nfunction App() {\n  const theme = createTheme({\n    palette: {\n      primary: {\n        main: purple[500],\n      },\n      secondary: {\n        main: green[500],\n      },\n    },\n  });\n  return (\n    <ThemeProvider theme={theme}>\n      <MainLayout>\n        <AboutScreen/>\n      </MainLayout>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}